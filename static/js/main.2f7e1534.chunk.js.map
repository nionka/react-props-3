{"version":3,"sources":["data/data.js","components/message/Message.jsx","components/response/Response.jsx","components/typing/Typing.jsx","components/messageHistory/MessageHistory.jsx","App.js","reportWebVitals.js","index.js"],"names":["messages","id","from","name","type","time","text","Message","message","className","Response","Typing","MessageHistory","list","length","messageItem","map","item","defaultProps","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oJAAMA,G,UAAW,CAAC,CACdC,GAAI,cACJC,KAAM,CAAEC,KAAM,kCACdC,KAAM,WACNC,KAAM,QACNC,KAAM,kRACL,CACDL,GAAI,cACJC,KAAM,CAAEC,KAAM,wCACdC,KAAM,UACNC,KAAM,QACNC,KAAM,8bACL,CACDL,GAAI,cACJC,KAAM,CAAEC,KAAM,kCACdC,KAAM,WACNC,KAAM,QACNC,KAAM,8rBACL,CACDL,GAAI,cACJC,KAAM,CAAEC,KAAM,wCACdC,KAAM,UACNC,KAAM,QACNC,KAAM,6RACL,CACDL,GAAI,cACJC,KAAM,CAAEC,KAAM,wCACdC,KAAM,SACNC,KAAM,W,OCRKE,MAlBf,YAAqC,IAAlBL,EAAiB,EAAjBA,KAAMM,EAAW,EAAXA,QACrB,OACI,qBAAIC,UAAU,WAAd,UACI,sBAAKA,UAAU,2BAAf,UACI,sBAAMA,UAAU,oBAAhB,SAAqCD,EAAQH,OADjD,aAEI,sBAAMI,UAAU,oBAAhB,SAAqCP,EAAKC,OAC1C,mBAAGM,UAAU,iCAAb,uBAEJ,qBAAKA,UAAU,oCAAf,SAAoDD,EAAQF,WCSzDI,MAjBf,YAAuC,IAAlBR,EAAiB,EAAjBA,KAAMM,EAAW,EAAXA,QACvB,OACI,+BACI,sBAAKC,UAAU,eAAf,UACA,uBAAMA,UAAU,oBAAhB,UAAoC,mBAAGA,UAAU,qCAAb,oBAA6DP,EAAKC,QACtG,sBAAMM,UAAU,oBAAhB,SAAqCD,EAAQH,UAE7C,qBAAKI,UAAU,qBAAf,SAAqCD,EAAQF,WCc1CK,MArBf,YAAoC,IAAlBT,EAAiB,EAAjBA,KAAMM,EAAW,EAAXA,QACpB,OACI,6BACI,sBAAKC,UAAU,eAAf,UACI,uBAAMA,UAAU,oBAAhB,UAAoC,mBAAGA,UAAU,qCAAb,oBAA6DP,EAAKC,QACtG,sBAAMM,UAAU,oBAAhB,SAAqCD,EAAQH,OAC7C,gCACI,mBAAGI,UAAU,qCAAb,oBACA,mBAAGA,UAAU,yCAAb,oBACA,mBAAGA,UAAU,yCAAb,6BCNpB,SAASG,EAAT,GAAmC,IAATC,EAAQ,EAARA,KACtB,GAAoB,IAAhBA,EAAKC,OAAc,OAAO,KAE9B,IAAMC,EAAcF,EAAKG,KAAI,SAAAC,GACzB,MAAkB,YAAdA,EAAKb,KAED,cAAC,EAAD,CAAuBF,KAAMe,EAAKf,KAAMM,QAASS,GAAnCA,EAAKhB,IAIT,aAAdgB,EAAKb,KAED,cAAC,EAAD,CAAwBF,KAAMe,EAAKf,KAAMM,QAASS,GAAnCA,EAAKhB,IAIV,WAAdgB,EAAKb,KAED,cAAC,EAAD,CAAsBF,KAAMe,EAAKf,KAAMM,QAASS,GAAnCA,EAAKhB,IAInB,QAGX,OACI,6BAAKc,IAKbH,EAAeM,aAAe,CAC1BL,KAAM,IAOKD,QC3BAO,MAbf,WACE,OACE,sBAAKV,UAAU,qBAAf,UACE,qBAAKA,UAAU,gBACjB,qBAAKA,UAAU,OAAf,SACE,qBAAKA,UAAU,eAAf,SACE,cAAC,EAAD,CAAgBI,KAAMb,YCEfoB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.2f7e1534.chunk.js","sourcesContent":["const messages = [{\n    id: 'chat-5-1090',\n    from: { name: 'Ольга' },\n    type: 'response',\n    time: '10:10',\n    text: 'Привет, Виктор. Как дела? Как идет работа над проектом?'\n  }, {\n    id: 'chat-5-1091',\n    from: { name: 'Виктор' },\n    type: 'message',\n    time: '10:12',\n    text: 'Привет. Давай сегодня созвонимся. Проект практически готов, и у меня есть что показать.'\n  }, {\n    id: 'chat-5-1092',\n    from: { name: 'Ольга' },\n    type: 'response',\n    time: '10:14',\n    text: 'Не уверена что сегодня получится. Не все еще в офисе. Давай уточню через час. Возникли ли какие-либо проблемы на последней стадии проекта?'\n  }, {\n    id: 'chat-5-1093',\n    from: { name: 'Виктор' },\n    type: 'message',\n    time: '10:20',\n    text: 'Нет, все прошло гладко. Очень хочу показать всё команде.'\n  }, {\n    id: 'chat-5-1094',\n    from: { name: 'Виктор' },\n    type: 'typing',\n    time: '10:31'\n  }];\n\n  export { messages }","import PropTypes from 'prop-types';\n\nfunction Message({ from, message }) {\n    return (\n        <li className=\"clearfix\">\n            <div className=\"message-data align-right\">\n                <span className=\"message-data-time\">{message.time}</span> &nbsp; &nbsp;\n                <span className=\"message-data-name\">{from.name}</span>\n                <i className=\"fa fa-circle me material-icons\">circle</i>\n            </div>\n            <div className=\"message other-message float-right\">{message.text}</div>\n        </li>\n    )\n}\n\nMessage.propTypes = {\n    from: PropTypes.object,\n    message: PropTypes.object\n}\n\nexport default Message","import PropTypes from 'prop-types';\n\nfunction Response ({ from, message }) {\n    return (\n        <li>\n            <div className=\"message-data\">\n            <span className=\"message-data-name\"><i className=\"fa fa-circle online material-icons\">circle</i>{from.name}</span>\n            <span className=\"message-data-time\">{message.time}</span>\n            </div>\n            <div className=\"message my-message\">{message.text}</div>\n        </li>\n    )   \n}\n\nResponse.propTypes = {\n    from: PropTypes.object,\n    message: PropTypes.object\n}\n\nexport default Response","import PropTypes from 'prop-types';\n\nfunction Typing({ from, message }) {\n    return (\n        <li>\n            <div className=\"message-data\">\n                <span className=\"message-data-name\"><i className=\"fa fa-circle online material-icons\">circle</i>{from.name}</span>\n                <span className=\"message-data-time\">{message.time}</span>\n                <div>\n                    <i className=\"fa fa-circle online material-icons\">circle</i>\n                    <i className=\"fa fa1 fa-circle online material-icons\">circle</i>\n                    <i className=\"fa fa2 fa-circle online material-icons\">circle</i>\n                </div>\n            </div>\n        </li>\n    )    \n}\n\nTyping.propTypes = {\n    from: PropTypes.object,\n    message: PropTypes.object\n}\n\nexport default Typing\n","import PropTypes from 'prop-types';\nimport Message from '../message/Message';\nimport Response from '../response/Response';\nimport Typing from '../typing/Typing';\n\nfunction MessageHistory({ list }) {\n    if (list.length === 0) return null\n\n    const messageItem = list.map(item => {\n        if (item.type === 'message') {\n            return (\n                <Message key={item.id} from={item.from} message={item} />\n            )\n        }\n\n        if (item.type === 'response') {\n            return (\n                <Response key={item.id} from={item.from} message={item} />\n            )\n        }\n\n        if (item.type === 'typing') {\n            return (\n                <Typing key={item.id} from={item.from} message={item} />\n            )\n        }\n\n        return null       \n    })\n    \n    return (\n        <ul>{messageItem}</ul>\n    )\n}\n\n\nMessageHistory.defaultProps = {\n    list: []\n}\n\nMessageHistory.propTypes = {\n    list: PropTypes.array.isRequired\n}\n\nexport default MessageHistory","import './App.css';\nimport { messages } from './data/data';\nimport MessageHistory from './components/messageHistory/MessageHistory';\n\nfunction App() {\n  return (\n    <div className=\"clearfix container\">\n      <div className=\"people-list\"></div>\n    <div className=\"chat\">\n      <div className=\"chat-history\">\n        <MessageHistory list={messages} />\n      </div>\n    </div>  \n  </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}